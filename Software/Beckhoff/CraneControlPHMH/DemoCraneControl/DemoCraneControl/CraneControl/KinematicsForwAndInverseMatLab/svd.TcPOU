<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="svd" Id="{7ae028ff-9316-4376-ba82-9300e2c0f7ca}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK svd
VAR_INPUT
    A: ARRAY [0..29] OF LREAL;
END_VAR
VAR_OUTPUT
    U: ARRAY [0..29] OF LREAL;
    b_s: ARRAY [0..4] OF LREAL;
    V: ARRAY [0..24] OF LREAL;
END_VAR
VAR
    i0_xrot_c: xrot_c;
    i0_xrotg: xrotg;
    i0_xrot: xrot;
    i0_xswap_g: xswap_g;
    i0_xswap: xswap;
    i0_xscal_fiz: xscal_fiz;
    i0_xscal_fi: xscal_fi;
    i0_xaxpy_dmy: xaxpy_dmy;
    i0_xaxpy: xaxpy;
    i0_xaxpy_d: xaxpy_d;
    i0_xaxpy_dm: xaxpy_dm;
    i0_xscal_f: xscal_f;
    i0_xscal: xscal;
END_VAR
VAR_TEMP
    b_A: ARRAY [0..29] OF LREAL;
    b_b_s: ARRAY [0..4] OF LREAL;
    e: ARRAY [0..4] OF LREAL;
    work: ARRAY [0..5] OF LREAL;
    Vf: ARRAY [0..24] OF LREAL;
    qq: DINT;
    apply_transform: BOOL;
    nrm: LREAL;
    qjj: DINT;
    qp1jj: DINT;
    m: DINT;
    qp1q: DINT;
    rt: LREAL;
    ztest: LREAL;
    smm1: LREAL;
    emm1: LREAL;
    sqds: LREAL;
    shift: LREAL;
    j_ii: DINT;
    exitg1: DINT;
    temp1: LREAL;
    temp2: LREAL;
    temp3: LREAL;
    temp4: LREAL;
    temp5: LREAL;
    temp6: LREAL;
    temp7: LREAL;
    temp8: LREAL;
    temp9: LREAL;
    temp10: LREAL;
    temp11: LREAL;
    temp12: LREAL;
    temp13: LREAL;
    temp14: LREAL;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[FOR m := 0 TO 29 DO 
    b_A[m] := A[m];
END_FOR;
FOR m := 0 TO 4 DO 
    b_b_s[m] := 0.0;
    e[m] := 0.0;
END_FOR;
FOR m := 0 TO 5 DO 
    work[m] := 0.0;
END_FOR;
FOR m := 0 TO 29 DO 
    U[m] := 0.0;
END_FOR;
FOR m := 0 TO 24 DO 
    Vf[m] := 0.0;
END_FOR;
FOR m := 0 TO 4 DO 
    qq := (6 * m) + m;
    apply_transform := FALSE;
    nrm := xnrm2(b_n := 6 - m, x := b_A, ix0 := qq + 1);
    IF nrm > 0.0 THEN 
        apply_transform := TRUE;
        IF b_A[qq] < 0.0 THEN 
            b_b_s[m] :=  -nrm;
        ELSE 
            b_b_s[m] := nrm;
        END_IF;
        IF ABS(b_b_s[m]) >= 1.0020841800044864E-292 THEN 
            i0_xscal(b_n := 6 - m, a := 1.0 / b_b_s[m], x := b_A, ix0 := qq + 1);
        ELSE 
            qp1q := (qq - m) + 6;
            qjj := qq;
            WHILE (qjj + 1) <= qp1q DO
                b_A[qjj] := b_A[qjj] / b_b_s[m];
                qjj := qjj + 1;
            END_WHILE;
        END_IF;
        b_A[qq] := b_A[qq] + 1.0;
        b_b_s[m] :=  -b_b_s[m];
    ELSE 
        b_b_s[m] := 0.0;
    END_IF;
    qp1q := m + 1;
    WHILE (qp1q + 1) < 6 DO
        qjj := (6 * qp1q) + m;
        IF apply_transform THEN 
            temp1 := xdotc(b_n := 6 - m, x := b_A, ix0 := qq + 1, y := b_A, iy0 := qjj + 1);
            i0_xaxpy(b_n := 6 - m, a :=  -(temp1 / b_A[m + (6 * m)]), ix0 := qq + 1, y := b_A, iy0 := qjj + 1);
        END_IF;
        e[qp1q] := b_A[qjj];
        qp1q := qp1q + 1;
    END_WHILE;
    qq := m;
    WHILE (qq + 1) < 7 DO
        U[qq + (6 * m)] := b_A[(6 * m) + qq];
        qq := qq + 1;
    END_WHILE;
    IF (m + 1) <= 3 THEN 
        nrm := xnrm2_l(b_n := 4 - m, x := e, ix0 := m + 2);
        IF nrm = 0.0 THEN 
            e[m] := 0.0;
        ELSE 
            IF e[m + 1] < 0.0 THEN 
                e[m] :=  -nrm;
            ELSE 
                e[m] := nrm;
            END_IF;
            nrm := e[m];
            IF ABS(e[m]) >= 1.0020841800044864E-292 THEN 
                i0_xscal_f(b_n := 4 - m, a := 1.0 / e[m], x := e, ix0 := m + 2);
            ELSE 
                qq := m + 1;
                WHILE (qq + 1) <= 5 DO
                    e[qq] := e[qq] / nrm;
                    qq := qq + 1;
                END_WHILE;
            END_IF;
            e[m + 1] := e[m + 1] + 1.0;
            e[m] :=  -e[m];
            qq := m + 1;
            WHILE (qq + 1) < 7 DO
                work[qq] := 0.0;
                qq := qq + 1;
            END_WHILE;
            qq := m + 1;
            WHILE (qq + 1) < 6 DO
                i0_xaxpy_d(b_n := 5 - m, a := e[qq], x := b_A, ix0 := (m + (6 * qq)) + 2, y := work, iy0 := m + 2);
                qq := qq + 1;
            END_WHILE;
            qq := m + 1;
            WHILE (qq + 1) < 6 DO
                i0_xaxpy_dm(b_n := 5 - m, a := ( -e[qq]) / e[m + 1], x := work, ix0 := m + 2, y := b_A, iy0 := (m + (6 * qq)) + 2);
                qq := qq + 1;
            END_WHILE;
        END_IF;
        qq := m + 1;
        WHILE (qq + 1) < 6 DO
            Vf[qq + (5 * m)] := e[qq];
            qq := qq + 1;
        END_WHILE;
    END_IF;
END_FOR;
m := 3;
e[3] := b_A[27];
e[4] := 0.0;
FOR qp1q := 4 TO 0 BY -1 DO 
    qq := (6 * qp1q) + qp1q;
    IF b_b_s[qp1q] <> 0.0 THEN 
        qp1jj := qp1q + 1;
        WHILE (qp1jj + 1) < 6 DO
            qjj := ((6 * qp1jj) + qp1q) + 1;
            temp2 := xdotc(b_n := 6 - qp1q, x := U, ix0 := qq + 1, y := U, iy0 := qjj);
            i0_xaxpy(b_n := 6 - qp1q, a :=  -(temp2 / U[qq]), ix0 := qq + 1, y := U, iy0 := qjj);
            qp1jj := qp1jj + 1;
        END_WHILE;
        qjj := qp1q;
        WHILE (qjj + 1) < 7 DO
            qp1jj := (6 * qp1q) + qjj;
            U[qp1jj] :=  -U[qp1jj];
            qjj := qjj + 1;
        END_WHILE;
        U[qq] := U[qq] + 1.0;
        qq := 0;
        WHILE qq <= (qp1q - 1) DO
            U[qq + (6 * qp1q)] := 0.0;
            qq := qq + 1;
        END_WHILE;
    ELSE 
        FOR qjj := 0 TO 5 DO 
            U[qjj + (6 * qp1q)] := 0.0;
        END_FOR;
        U[qq] := 1.0;
    END_IF;
END_FOR;
FOR qq := 4 TO 0 BY -1 DO 
    IF (qq + 1) <= 3 THEN 
        IF e[qq] <> 0.0 THEN 
            qp1q := ((5 * qq) + qq) + 2;
            qjj := qq + 1;
            WHILE (qjj + 1) < 6 DO
                qp1jj := ((5 * qjj) + qq) + 2;
                temp3 := xdotc_i(b_n := 4 - qq, x := Vf, ix0 := qp1q, y := Vf, iy0 := qp1jj);
                i0_xaxpy_dmy(b_n := 4 - qq, a :=  -(temp3 / Vf[qp1q - 1]), ix0 := qp1q, y := Vf, iy0 := qp1jj);
                qjj := qjj + 1;
            END_WHILE;
        END_IF;
    END_IF;
    FOR qp1q := 0 TO 4 DO 
        Vf[qp1q + (5 * qq)] := 0.0;
    END_FOR;
    Vf[qq + (5 * qq)] := 1.0;
END_FOR;
FOR qq := 0 TO 4 DO 
    ztest := e[qq];
    IF b_b_s[qq] <> 0.0 THEN 
        rt := ABS(b_b_s[qq]);
        nrm := b_b_s[qq] / rt;
        b_b_s[qq] := rt;
        IF (qq + 1) < 5 THEN 
            ztest := ztest / nrm;
        END_IF;
        i0_xscal_fi(a := nrm, x := U, ix0 := (6 * qq) + 1);
    END_IF;
    IF (qq + 1) < 5 THEN 
        IF ztest <> 0.0 THEN 
            rt := ABS(ztest);
            nrm := rt / ztest;
            ztest := rt;
            b_b_s[qq + 1] := b_b_s[qq + 1] * nrm;
            i0_xscal_fiz(a := nrm, x := Vf, ix0 := (5 * (qq + 1)) + 1);
        END_IF;
    END_IF;
    e[qq] := ztest;
END_FOR;
qq := 0;
nrm := 0.0;
FOR qp1q := 0 TO 4 DO 
    temp4 := ABS(b_b_s[qp1q]);
    temp5 := ABS(e[qp1q]);
    temp6 := MAX(temp4, temp5);
    nrm := MAX(nrm, temp6);
END_FOR;
WHILE ((m + 2) > 0) AND (qq < 75) DO
    qp1jj := m + 1;
    REPEAT 
        exitg1 := 0;
        qp1q := qp1jj;
        IF qp1jj = 0 THEN 
            exitg1 := 1;
        ELSE 
            rt := ABS(e[qp1jj - 1]);
            IF rt <= ((ABS(b_b_s[qp1jj - 1]) + ABS(b_b_s[qp1jj])) * 2.2204460492503131E-16) THEN 
                e[qp1jj - 1] := 0.0;
                exitg1 := 1;
            ELSIF (rt <= 1.0020841800044864E-292) OR ((qq > 20) AND (rt <= (2.2204460492503131E-16 * nrm))) THEN 
                e[qp1jj - 1] := 0.0;
                exitg1 := 1;
            ELSE 
                qp1jj := qp1jj - 1;
            END_IF;
        END_IF;
    UNTIL NOT(exitg1 = 0)
    END_REPEAT;
    IF (m + 1) = qp1jj THEN 
        qp1jj := 4;
    ELSE 
        qjj := m + 2;
        j_ii := m + 2;
        REPEAT 
            exitg1 := 0;
            IF j_ii >= qp1jj THEN 
                qjj := j_ii;
                IF j_ii = qp1jj THEN 
                    exitg1 := 1;
                ELSE 
                    rt := 0.0;
                    IF j_ii < (m + 2) THEN 
                        rt := ABS(e[j_ii - 1]);
                    END_IF;
                    IF j_ii > (qp1jj + 1) THEN 
                        rt := ABS(e[j_ii - 2]) + rt;
                    END_IF;
                    ztest := ABS(b_b_s[j_ii - 1]);
                    IF (ztest <= (2.2204460492503131E-16 * rt)) OR (ztest <= 1.0020841800044864E-292) THEN 
                        b_b_s[j_ii - 1] := 0.0;
                        exitg1 := 1;
                    ELSE 
                        j_ii := j_ii - 1;
                    END_IF;
                END_IF;
            ELSE 
                exitg1 := 1;
            END_IF;
        UNTIL NOT(exitg1 = 0)
        END_REPEAT;
        IF qjj = qp1jj THEN 
            qp1jj := 3;
        ELSIF (m + 2) = qjj THEN 
            qp1jj := 1;
        ELSE 
            qp1jj := 2;
            qp1q := qjj;
        END_IF;
    END_IF;
    CASE qp1jj OF
        1: 
            rt := e[m];
            e[m] := 0.0;
            qjj := m;
            WHILE (qjj + 1) >= (qp1q + 1) DO
                i0_xrotg(a := b_b_s[qjj], b := rt);
                ztest := i0_xrotg.c;
                sqds := i0_xrotg.b_s;
                IF (qjj + 1) > (qp1q + 1) THEN 
                    emm1 := e[qjj - 1];
                    rt := emm1 * ( -sqds);
                    e[qjj - 1] := emm1 * ztest;
                END_IF;
                i0_xrot(x := Vf, ix0 := (5 * qjj) + 1, iy0 := (5 * (m + 1)) + 1, c := ztest, b_s := sqds);
                qjj := qjj - 1;
            END_WHILE;
        2: 
            rt := e[qp1q - 1];
            e[qp1q - 1] := 0.0;
            qjj := qp1q;
            WHILE (qjj + 1) <= (m + 2) DO
                i0_xrotg(a := b_b_s[qjj], b := rt);
                ztest := i0_xrotg.c;
                sqds := i0_xrotg.b_s;
                rt := ( -sqds) * e[qjj];
                e[qjj] := e[qjj] * ztest;
                i0_xrot_c(x := U, ix0 := (6 * qjj) + 1, iy0 := (6 * (qp1q - 1)) + 1, c := ztest, b_s := sqds);
                qjj := qjj + 1;
            END_WHILE;
        3: 
            rt := b_b_s[m + 1];
            temp7 := ABS(rt);
            temp8 := ABS(b_b_s[m]);
            temp9 := MAX(temp7, temp8);
            temp10 := ABS(e[m]);
            temp11 := MAX(temp9, temp10);
            temp12 := ABS(b_b_s[qp1q]);
            temp13 := MAX(temp11, temp12);
            temp14 := ABS(e[qp1q]);
            ztest := MAX(temp13, temp14);
            rt := rt / ztest;
            smm1 := b_b_s[m] / ztest;
            emm1 := e[m] / ztest;
            sqds := b_b_s[qp1q] / ztest;
            smm1 := (((smm1 + rt) * (smm1 - rt)) + (emm1 * emm1)) / 2.0;
            emm1 := rt * emm1;
            emm1 := emm1 * emm1;
            IF (smm1 <> 0.0) OR (emm1 <> 0.0) THEN 
                shift := SQRT((smm1 * smm1) + emm1);
                IF smm1 < 0.0 THEN 
                    shift :=  -shift;
                END_IF;
                shift := emm1 / (smm1 + shift);
            ELSE 
                shift := 0.0;
            END_IF;
            rt := ((sqds + rt) * (sqds - rt)) + shift;
            ztest := (e[qp1q] / ztest) * sqds;
            qjj := qp1q + 1;
            WHILE qjj <= (m + 1) DO
                i0_xrotg(a := rt, b := ztest);
                sqds := i0_xrotg.c;
                smm1 := i0_xrotg.b_s;
                IF qjj > (qp1q + 1) THEN 
                    e[qjj - 2] := rt;
                END_IF;
                emm1 := e[qjj - 1];
                rt := b_b_s[qjj - 1];
                e[qjj - 1] := (emm1 * sqds) - (rt * smm1);
                ztest := smm1 * b_b_s[qjj];
                b_b_s[qjj] := b_b_s[qjj] * sqds;
                i0_xrot(x := Vf, ix0 := (5 * (qjj - 1)) + 1, iy0 := (5 * qjj) + 1, c := sqds, b_s := smm1);
                b_b_s[qjj - 1] := (rt * sqds) + (emm1 * smm1);
                i0_xrotg(a := b_b_s[qjj - 1], b := ztest);
                sqds := i0_xrotg.c;
                smm1 := i0_xrotg.b_s;
                rt := (e[qjj - 1] * sqds) + (smm1 * b_b_s[qjj]);
                b_b_s[qjj] := (e[qjj - 1] * ( -smm1)) + (sqds * b_b_s[qjj]);
                ztest := smm1 * e[qjj];
                e[qjj] := e[qjj] * sqds;
                i0_xrot_c(x := U, ix0 := (6 * (qjj - 1)) + 1, iy0 := (6 * qjj) + 1, c := sqds, b_s := smm1);
                qjj := qjj + 1;
            END_WHILE;
            e[m] := rt;
            qq := qq + 1;
        ELSE
            IF b_b_s[qp1q] < 0.0 THEN 
                b_b_s[qp1q] :=  -b_b_s[qp1q];
                i0_xscal_fiz(a := -1.0, x := Vf, ix0 := (5 * qp1q) + 1);
            END_IF;
            qq := qp1q + 1;
            REPEAT 
                exitg1 := 0;
                IF (qp1q + 1) < 5 THEN 
                    IF b_b_s[qp1q] < b_b_s[qq] THEN 
                        rt := b_b_s[qp1q];
                        b_b_s[qp1q] := b_b_s[qq];
                        b_b_s[qq] := rt;
                        i0_xswap(x := Vf, ix0 := (5 * qp1q) + 1, iy0 := (5 * (qp1q + 1)) + 1);
                        i0_xswap_g(x := U, ix0 := (6 * qp1q) + 1, iy0 := (6 * (qp1q + 1)) + 1);
                        qp1q := qq;
                        qq := qq + 1;
                    ELSE 
                        exitg1 := 1;
                    END_IF;
                ELSE 
                    exitg1 := 1;
                END_IF;
            UNTIL NOT(exitg1 = 0)
            END_REPEAT;
            qq := 0;
            m := m - 1;
    END_CASE;
END_WHILE;
FOR m := 0 TO 4 DO 
    b_s[m] := b_b_s[m];
    FOR qq := 0 TO 4 DO 
        V[qq + (5 * m)] := Vf[(5 * m) + qq];
    END_FOR;
END_FOR;
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>